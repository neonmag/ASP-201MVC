@model ASP_201MVC.Models.Home.User.RegistrationModel
@using ASP_201MVC.Models.Home.User
@{
    ViewData["Title"] = "Registration";
}

<div>
    <h1 class="display-4">Registration of new user</h1>
</div>
<form method="post" asp-controller="User" asp-action="Register" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Login">Login</label>
        <input type="text" class="form-control" asp-for="Login" aria-describedby="loginHelp" placeholder="Enter login">
    </div>
    <div class="form-group">
        <label asp-for="Password">Password</label>
        <input type="password" class="form-control" asp-for="Password" placeholder="Password">
    </div>
    <div class="form-group">
        <label asp-for="RepeatPassword">Repeat Password</label>
        <input type="password" class="form-control" asp-for="RepeatPassword" placeholder="Repeat Password">
    </div>
    <div class="form-group">
        <label asp-for="Email">Email address</label>
        <input type="email" class="form-control" asp-for="Email" placeholder="name@example.com">
    </div>
    <div class="form-group">
        <label asp-for="RealName">Name</label>
        <input type="text" class="form-control" asp-for="RealName" aria-describedby="nameHelp" placeholder="Enter your name">
    </div>
    <br />
    <div class="mb-3">
        <label asp-for="Avatar" class="form-label">Upload avatar</label>
        <input asp-for="Avatar" class="form-control" type="file">
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Submit</button>
</form>
<br />
@if (ViewData["registrationModel"] != null)
{
    // была передача данных
    var registrationModel = ViewData["registrationModel"] as RegistrationModel;
    var registerValidation = ViewData["registerValidation"] as RegisterValidationModel;
    if (Convert.ToBoolean(ViewData["isModelValid"]) == false)
    {
        foreach (var item in registerValidation)
        {
            <div class="alert alert-primary" role="alert">
                @item
            </div>
        }
    }
    <p>
        Данные которые были переданны <br>
        @registrationModel.Login <br>
        @registrationModel.Password <br>
        @registrationModel.RepeatPassword <br>
        @registrationModel.Email <br>
        @registrationModel.RealName <br>
    </p>
}



<hr />
<h2>Щодо HTML форм</h2>
<p>
    Що таке форма?
    Це засіб HTML/браузера відправляти дані. Форму можна вважати розширенням поняття
    "посилання", яке окрім переходу на задану адресу також пересилає на неї дані
    (долучає дані до запиту, що формується на цю адресу). Відправлення форми, як і
    перехід за посиланням, руйнує дану сторінку і створює нову з відповіді на запит.
</p>
<p>
    Форма обмежується тегом &lt;form>, на сторінці можут бути довільна кількість форм,
    кожна форма включає у запит тількі ті дані, що належать її контенту (між
    відкритим та закритим тегами). Кожна форма має свою адресу відправлення, тобто
    різні форми можуть посилатись на різні адреси.
</p>
<p>
    Спосіб передачі параметрів визначається з атрибутів форми:<br />
    <b>method</b>: get (default) або post<br />
    <b>enctype</b>: application/x-www-form-urlencoded (default) або multipart/form-data<br />
    method - один з двох методів НТТР запиту (згідно зі стандартом https://www.rfc-editor.org/rfc/rfc7231#page-22)
    З точки зору форм, метод регулює спосіб включення даних до НТТР-пакету:<br />
    GET : ...?Login=anon&Password=123&...<br />
    дані включаються безпосередньо в URL, утворюючи секцію "query" (параметрів запиту)<br />
    POST : такі саме дані (?Login=anon&Password=123&...) включаються у тіло запиту.
    У складі URL вони не відображаються, для їх аналізу слід відкрити інструмент
    "Network" у консолі браузера, сфокусуватись на даний запит та відкрити таб
    "Payload"<br />
</p>
<p>
    Як вибрати метод форми?<br />
    GET - коли передаються невеликі дані, що не мають секретності.
    Головна перевага - є можливість створити постійне посилання із певними даними.<br />
    POST - вважається більш захищеним (насправді лише від зовнішнього погляду),
    Головна перевага - можливість передавання великих данних, у т.ч. файлів
</p>
<p>
    Передача файлів за допомогою форм. <br />
    HTML форма здатна передавати файли на сервер, але для цього необхідно забезпечити
    деякі умови:<br />
    - у формі мають бути input-и з типом "file"<br />
    - метод форми - тільки "post"<br />
    - enctype тільки multipart/form-data
</p>
<hr />
<h2>ASP особливості</h2>
<p>
    ASP методи контроллера можуть автоматично "зібрати" об'єкт моделі <u>
        за збігом
        імен
    </u> у класі-моделі та параметрах запиту (query). Для того щоб зв'язування
    відбулось успішно, необхідно забезпечити однаковість імен полів форми та імен
    класу-моделі.
</p>
<p>
    Одни з найпростіших способів забезпечити такий збіг - це використовувати
    тег-помічники з атрибутом asp-for
</p>
<p>
    Прийом файлу від клієнта та його збереження на боці сервера називається
    "Upload(ing)". Для прийому файлу у моделі форми слід додати поле з типом
    IFormFile. Подальше зв'язування ASP виконає автоматично (за збігом імен)
</p>